// TODO: chan sizes
// TODO: debug packets
package soupbintcp

import (
	"bytes"
  "context"
	"fmt"
	"net"
	"reflect"
	"sync/atomic"
	"time"

	utils "github.com/johnietre/utils/go"
)

var (
	globalTick     = newGlobalTicker()
	globalSessions = utils.NewSyncSet[*Session]()
)

func init() {
	globalTick.add(func(t time.Time) {
		globalSessions.Range(func(sess *Session) bool {
			// TODO
			return sess.sendHeartbeat() != nil
		})
	})
	globalTick.start()
}

const (
	ServerHeartbeat      = time.Second
	DefaultClientTimeout = time.Second * 15
)

var (
  // ErrSlowClient is returned when a client is too slow.
	ErrSlowClient     = fmt.Errorf("slow client")
  // ErrClientTimedout is returned when a client timed out.
	ErrClientTimedout = fmt.Errorf("client timed out")
	// TODO: make struct?
  // ErrSessionEnded is returned when a session has ended.
	ErrSessionEnded    = fmt.Errorf("session ended")
  // ErrClosed is returned when something is closed.
	ErrClosed          = fmt.Errorf("closed")
  // ErrClientLoggedOut is returned when the client has logged out.
	ErrClientLoggedOut = fmt.Errorf("client logged out")
)

type sequencedPacket struct {
	// TODO: make SequenceNumber?
	// Zero is treated as invalid (not sequenced)
	seqNum uint64
	packet Packet
  // Is used to indicate that this message is only meant so the client chan
  // check its queue.
  checkOnly bool
}

// SessionHandler is used to handle packets sent from clients.
type SessionHandler = func(*SessionClient, Packet)

// SessionClient is a client connnected to a session.
type SessionClient struct {
	session atomic.Pointer[Session]

	conn       *net.TCPConn
	packetChan *utils.RWMutex[chan sequencedPacket]
  packetQueue *utils.Mutex[*utils.Slice[sequencedPacket]]

	startSeqNum uint64

	// Second-precision timestamp
	lastHeartbeat atomic.Int64
	timeout       time.Duration

	closeErr *utils.AValue[utils.ErrorValue]
  // Is closed when the client is closed.
  closedChan chan utils.Unit
}

func newSessionClient(
	sess *Session,
	startSeqNum uint64,
	conn *net.TCPConn,
) *SessionClient {
	sc := &SessionClient{
		conn:       conn,
		packetChan: utils.NewRWMutex(make(chan sequencedPacket, 15)),
    packetQueue: utils.NewMutex(utils.NewSlice[sequencedPacket](nil)),

		startSeqNum: startSeqNum,

		timeout: sess.clientTimeout,

		//closeErr: utils.NewAValue(utils.NewErrorValue(nil)),
		closeErr: &utils.AValue[utils.ErrorValue]{},
    closedChan: make(chan utils.Unit, 0),
	}
	sc.session.Store(sess)
	sc.lastHeartbeat.Store(time.Now().Unix())
	return sc
}

// LocalAddr is the local address of the client.
func (sc *SessionClient) LocalAddr() net.Addr {
	return sc.conn.LocalAddr()
}

// RemoteAddr is the remote address of the client.
func (sc *SessionClient) RemoteAddr() net.Addr {
	return sc.conn.RemoteAddr()
}

// SendUnsequenced attempts to send unsequenced data to the client. If an error
// is returned, the Close should be called.
func (sc *SessionClient) SendUnsequenced(payload Payload) error {
	if err := sc.CloseErr(); err != nil {
		return err
	}
	return sc.sendPacket(sequencedPacket{
		seqNum: 0,
		packet: UnsequencedDataPacket(payload),
	})
}

func (sc *SessionClient) sendPacket(packet sequencedPacket) error {
	err := sc.CloseErr()
	if err != nil {
		return err
	}
	sc.packetChan.RApply(func(cp *chan sequencedPacket) {
		ch := *cp
		if ch == nil {
			err = sc.CloseErr()
		}
		// TODO
		select {
		case ch <- packet:
		default:
			err = sc.closeWithErr(ErrSlowClient)
		}
	})
	return err
}

// Session returns the session the client belongs to.
func (sc *SessionClient) Session() *Session {
  return sc.session.Load()
}

// Close closes the client.
func (sc *SessionClient) Close() {
	sc.closeWithErr(ErrClosed)
	sc.closeAndRemove()
	return
}

// CloseErr returns the error associated with the client's closure.
func (sc *SessionClient) CloseErr() error {
	ev, _ := sc.closeErr.LoadSafe()
	return ev.Error
}

// IsClosed returns whether the client is closed.
func (sc *SessionClient) IsClosed() bool {
	return sc.CloseErr() == nil
}

func (sc *SessionClient) start() {
	go sc.runSend()
	go sc.runListen()
}

func bubblePackets(pkts []sequencedPacket) {
  l, swapped := len(pkts), true
  for swapped {
    swapped = false
    for i := 1; i < l; i++ {
      if pkts[i-1].seqNum > pkts[i].seqNum {
        pkts[i-1], pkts[i] = pkts[i], pkts[i-1]
        swapped = true
      }
    }
    l--
  }
}

func (sc *SessionClient) runSend() {
	ch := *sc.packetChan.RLock()
	sc.packetChan.RUnlock()
	if ch == nil {
		return
	}
	// TODO: what to do if a sequence number is skipped
	nextSeqNum := sc.startSeqNum
Loop:
	for {
		select {
		case seqPacket, ok := <-ch:
			if !ok {
				break Loop
			}
      if !seqPacket.checkOnly {
        if seqPacket.packet.PacketType() == PacketTypeEndOfSession {
        }
        isSeq := seqPacket.seqNum != 0 &&
        // packet.PacketType() == PacketTypeSequencedData &&
        true
        shouldSend := true
        if isSeq {
          if seqPacket.seqNum > nextSeqNum {
            sc.packetQueue.Apply(func(sp **utils.Slice[sequencedPacket]) {
              sl := *sp
              sl.PushBack(seqPacket)
            })
            shouldSend = false
          } else if seqPacket.seqNum < nextSeqNum {
            shouldSend = false
          }
        }
        if shouldSend {
          if _, err := sc.conn.Write(seqPacket.packet.Bytes()); err != nil {
            sc.closeWithErr(err)
            fmt.Println("broken")
            break Loop
          }
        }
      }

      sc.packetQueue.Apply(func(sp **utils.Slice[sequencedPacket]) {
        sl := *sp
        bubblePackets(sl.Data())
        data, start := sl.Data(), 0
        for _, spkt := range data {
          if spkt.seqNum != 0 {
            break
          }
          if _, err := sc.conn.Write(spkt.packet.Bytes()); err != nil {
            sc.closeWithErr(err)
            fmt.Println("returned")
            return
          }
          data = data[1:]
        }
        for i, spkt := range data {
          if spkt.seqNum > nextSeqNum {
            break
          } else if spkt.seqNum == nextSeqNum {
						if _, err := sc.conn.Write(spkt.packet.Bytes()); err != nil {
							sc.closeWithErr(err)
            fmt.Println("returned2")
              return
						}
            if start == 0 {
              start = i+1
            }
            nextSeqNum++
          }
        }
        sl.SetData(data[start:])
      })
      if sc.IsClosed() {
        break Loop
      }
		}
	}
	sc.conn.Close()
	sc.closeAndRemove()
}

func (sc *SessionClient) runListen() {
Loop:
	for {
		packet, err := ReadPacketFrom(sc.conn)
		if err != nil {
			sc.closeWithErr(err)
			break
		}
		sc.updateHeartbeat()
		sess := sc.session.Load()
		if sess == nil {
			break Loop
		}
		switch pt := packet.PacketType(); pt {
		case PacketTypeDebug:
			if sess.debugHandler != nil {
				sess.debugHandler(sc, packet)
			}
		case PacketTypeUnsequencedData:
			if sess.handler != nil {
				sess.handler(sc, packet)
			}
		case PacketTypeClientHeartbeat:
		case PacketTypeLogoutRequest:
			sc.closeWithErr(ErrClientLoggedOut)
			break Loop
		default:
			sc.closeWithErr(&InvalidPacketError{Packet: packet})
			break Loop
		}
	}
	sc.closeAndRemove()
}

func (sc *SessionClient) updateHeartbeat() {
	sc.lastHeartbeat.Store(time.Now().Unix())
}

// This should be called within this package, not Close.
func (sc *SessionClient) closeAndRemove() {
	sess := sc.session.Swap(nil)
	if sess == nil {
		return
	}
	sess.clients.Apply(func(sp **utils.Slice[*SessionClient]) {
		(*sp).RemoveFirst(func(c *SessionClient) bool {
			return c == sc
		})
	})
	sc.close()
}

// Closes the packet chan.
/* NOT SO CURRENTLY: and the TCP connection. */
func (sc *SessionClient) close() {
	// TODO: should the conn be closed here or in runSend?
	//sc.conn.Close()
	sc.packetChan.Apply(func(cp *chan sequencedPacket) {
		ch := *cp
		if ch != nil {
			close(ch)
			*cp = nil
		}
	})
}

// Wait waits for the client to be closed. If there is no done channel or the
// context is nil, the function returns immediately whether it is closed or
// not. Otherwise, it waits for closure or the context to be canceled,
// whichever is first.
func (c *SessionClient) Wait(ctx context.Context) bool {
  _, ok := <-c.closedChan
  if ok {
    return true
  }
  if ctx == nil {
    return false
  }
  done := ctx.Done()
  if done == nil {
    return false
  }
  closed := false
  select {
  case _, _ = <-done:
  case _, _ = <- c.closedChan:
    closed = true
  }
  return closed
}

func (sc *SessionClient) closeWithErr(err error) error {
	if sc.closeErr.StoreIfEmpty(utils.NewErrorValue(err)) {
    close(sc.closedChan)
  }
	return sc.closeErr.Load().Error
}

// SessionOpts are options used in session creation.
type SessionOpts struct {
  // Id is the session ID.
	Id               SessionId
  // SequenceNumber is the starting sequence number.
	SequenceNumber   uint64
  // PacketChanLen is the length of the internal channel used for packets.
	PacketChanLen    int
  // ClientTimeout is the max time a client can go without the server having
  // received something.
	ClientTimeout    time.Duration
  // NewClientHandler is the optional handler for when a new client connects.
  // The packet passed is the login packet.
	NewClientHandler SessionHandler
  // DebugHandler is the handler used for when debug messages are received.
	DebugHandler     SessionHandler
	//Store DataStore
}

const (
	runningNotStarted int32 = iota
	runningRunning
	runningStopped
)

// Session represents a session on a server. The session must be added to a
// SessionsManager (which must then be started or must have already been
// started) for the session to run.
type Session struct {
	manager atomic.Pointer[SessionsManager]

	id               SessionId
	seqNum           atomic.Uint64
	handler          SessionHandler
	clientTimeout    time.Duration
	newClientHandler SessionHandler
	debugHandler     SessionHandler

	packetChan *utils.RWMutex[chan Packet]
	clients    *utils.Mutex[*utils.Slice[*SessionClient]]
	store      DataStore

	running atomic.Int32

	closeErr *utils.AValue[utils.ErrorValue]
  // Is closed when the client is closed.
  closedChan chan utils.Unit
}

// NewSession creates a new session.
func NewSession(
	handler SessionHandler,
	store DataStore,
	opts *SessionOpts,
) *Session {
	if opts.PacketChanLen <= 0 {
		opts.PacketChanLen = 15
	}
	if opts.ClientTimeout <= 0 {
		opts.ClientTimeout = DefaultClientTimeout
	}
	// TODO
	if store == nil {
		store = NewSliceDataStore(1)
	}
	s := &Session{
		id:               opts.Id,
		handler:          handler,
		clientTimeout:    opts.ClientTimeout,
		newClientHandler: opts.NewClientHandler,
		debugHandler:     opts.DebugHandler,

		packetChan: utils.NewRWMutex(make(chan Packet, opts.PacketChanLen)),
		clients:    utils.NewMutex(utils.NewSlice[*SessionClient](nil)),
		store:      store,

		//closeErr: utils.NewAValue(utils.ErrorValue{}),
		closeErr: &utils.AValue[utils.ErrorValue]{},
    closedChan: make(chan utils.Unit),
	}
	// TODO: set seq num as 0?
	s.seqNum.Store(opts.SequenceNumber)
	return s
}

// Id returns the session's ID.
func (s *Session) Id() SessionId {
	return s.id
}

// LastSeqNum returns the sequence number of the last sequenced packet.
func (s *Session) LastSeqNum() uint64 {
	return s.seqNum.Load()
}

// NextSeqNum returns the next sequence number for the next sequenced
// packet.
func (s *Session) NextSeqNum() uint64 {
	return s.LastSeqNum() + 1
}

// LastSequenceNumber returns the sequence number of the last sequenced packet
// as a SequenceNumber.
func (s *Session) LastSequenceNumber() SequenceNumber {
	return SequenceNumberFromUint64(s.LastSeqNum())
}

// NextSequenceNumber returns the next sequence number for the next sequenced
// packet as a SequenceNumber.
func (s *Session) NextSequenceNumber() SequenceNumber {
	return SequenceNumberFromUint64(s.NextSeqNum())
}

// IncrSequenceNumber increments the sequence number, returning the newest
// number.
func (s *Session) incrSequenceNumber() uint64 {
	return s.seqNum.Add(1)
}

// SendSequenced sends a sequenced packet to all clients of the session.
func (s *Session) SendSequenced(payload Payload) error {
	err := s.CloseErr()
	if err != nil {
		return err
	}
	s.packetChan.RApply(func(cp *chan Packet) {
		ch := *cp
		if ch == nil {
			err = s.CloseErr()
			return
		}
		ch <- SequencedDataPacket(payload)
	})
	return err
}

func (s *Session) sendHeartbeat() error {
	err := s.CloseErr()
	if err != nil {
		return err
	}
	s.packetChan.RApply(func(cp *chan Packet) {
		ch := *cp
		if ch == nil {
			err = s.CloseErr()
			return
		}
		ch <- ServerHeartbeatPacket()
	})
	return err
}

// End ends the session.
func (s *Session) End() error {
	err := s.CloseErr()
	if err != nil {
		return err
	}
	s.closeWithErr(ErrSessionEnded)
	return s.end()
}

func (s *Session) end() (err error) {
	s.running.Store(runningStopped)
	sm := s.manager.Swap(nil)
	if sm != nil {
		sm.RemoveSession(s.id, nil)
	} else {
		//return s.CloseErr()
	}
	s.packetChan.Apply(func(cp *chan Packet) {
		ch := *cp
		if ch == nil {
			err = s.CloseErr()
			return
		}
		close(ch)
		*cp = nil
	})
	if err != nil {
		return err
	}
	s.clients.Apply(func(sp **utils.Slice[*SessionClient]) {
		clients := *sp
		if clients == nil {
			err = s.CloseErr()
			return
		}
		for _, client := range clients.Data() {
			client.sendPacket(sequencedPacket{
				seqNum: 0,
				packet: EndOfSessionPacket(),
			})
			s.closeClient(client, ErrSessionEnded, -1, nil)
		}
		// TODO: set sp to nil?
		clients.SetData(nil)
	})
	return err
}

func (s *Session) run() {
	if !s.running.CompareAndSwap(runningNotStarted, runningRunning) {
		return
	}
	ch := *s.packetChan.RLock()
	s.packetChan.RUnlock()
	for packet := range ch {
		heartbeat, done := packet.PacketType() == PacketTypeServerHeartbeat, false
		seqNum := uint64(0)
		if packet.PacketType() == PacketTypeSequencedData {
			seqNum = s.incrSequenceNumber()
			err := s.store.Set(SequenceNumberFromUint64(seqNum), packet.Payload())
			if err != nil {
				// TODO
				s.closeWithErr(err)
				s.end()
				break
			}
		}
		s.clients.Apply(func(sp **utils.Slice[*SessionClient]) {
			clients := *sp
			if clients == nil {
				done = true
				return
			}
			var now time.Time
			if heartbeat {
				now = time.Now()
			}
			for i, client := range clients.Data() {
				if heartbeat {
					diff := now.Sub(time.Unix(client.lastHeartbeat.Load(), 0))
					if diff > s.clientTimeout {
						client.closeWithErr(ErrClientTimedout)
					}
				}
				spkt := sequencedPacket{
					seqNum: seqNum,
					packet: packet,
				}
				if client.sendPacket(spkt) != nil {
					s.closeClient(client, nil, i, clients)
				}
			}
		})
		if done {
			break
		}
	}
	s.clients.Apply(func(sp **utils.Slice[*SessionClient]) {
		clients := *sp
		if clients == nil {
			return
		}
		for _, client := range clients.Data() {
			s.closeClient(client, nil, -1, nil)
		}
		clients.SetData(nil)
	})
  close(s.closedChan)
}

func (s *Session) closeClient(
	sc *SessionClient,
	err error,
	index int,
	clients *utils.Slice[*SessionClient],
) {
	if err != nil {
		sc.closeWithErr(err)
	}
	if sc.session.Swap(nil) != s {
		return
	}
	sc.close()
	if clients == nil {
		return
	}
	if index < 0 {
		index = clients.Index(func(c *SessionClient) bool {
			return c == sc
		})
	}
	if index != -1 {
		clients.Remove(index)
	}
}

func (s *Session) handle(conn *net.TCPConn, loginPacket Packet) {
	shouldClose := utils.NewT(true)
	defer utils.DeferClose(shouldClose, conn)

	seqNum, ok := loginPacket.SequenceNumber()
	if !ok {
		// TODO
		return
	}
	num, ok := seqNum.ToUint64Safe()
	if !ok {
		// TODO
		return
	}
	nextNum := s.NextSeqNum()
	if num != 0 && num < nextNum {
		nextNum = num
	}
	packet := LoginAcceptedPacket(s.id, SequenceNumberFromUint64(nextNum))
	if _, err := conn.Write(packet.Bytes()); err != nil {
		return
	}

	client := newSessionClient(s, nextNum, conn)
	client.start()
  // TODO: what to do if sess closed.
	s.clients.Apply(func(sp **utils.Slice[*SessionClient]) {
		(*sp).PushBack(client)
	})

  pktsLen := 0
  if nextNum < s.NextSeqNum() {
    pktsLen = int(s.NextSeqNum() - nextNum)
  }
  pkts := make([]sequencedPacket, pktsLen)
  for ; nextNum < s.NextSeqNum(); nextNum++ {
    payload, err := s.store.Get(SequenceNumberFromUint64(nextNum))
    if err != nil {
      // TODO: log or something?
      client.closeWithErr(err)
      client.close()
      return
    }
    pkts = append(pkts, sequencedPacket{
      seqNum: nextNum,
      packet: SequencedDataPacket(payload),
    })
  }
  client.packetQueue.Apply(func(sp **utils.Slice[sequencedPacket]) {
    sl := *sp
    sl.Append(pkts...)
  })
  client.sendPacket(sequencedPacket{checkOnly: true})
	*shouldClose = false
	// TODO: move up?
	if s.newClientHandler != nil {
		s.newClientHandler(client, loginPacket)
	}
}

// CloseErr returns the error associated with the session's ending/closing.
func (s *Session) CloseErr() error {
	ev, _ := s.closeErr.LoadSafe()
	return ev.Error
}

// IsClosed is an aliases for IsEnded().
func (s *Session) IsClosed() bool {
	return s.CloseErr() != nil
}

// IsEnded returns whether the session has ended or not.
func (s *Session) IsEnded() bool {
	return s.CloseErr() != nil
}

// Wait waits for the client to be closed. If there is no done channel or the
// context is nil, the function returns immediately whether it is closed or
// not. Otherwise, it waits for closure or the context to be canceled,
// whichever is first.
func (s *Session) Wait(ctx context.Context) bool {
  _, ok := <-s.closedChan
  if ok {
    return true
  }
  if ctx == nil {
    return false
  }
  done := ctx.Done()
  if done == nil {
    return false
  }
  closed := false
  select {
  case _, _ = <-done:
  case _, _ = <- s.closedChan:
    closed = true
  }
  return closed
}

// Running returns whether the session is running. A session can be both not
// running and not ended/closed, meaning it has not been started.
func (s *Session) Running() bool {
	return s.running.Load() == runningRunning
}

func (s *Session) closeWithErr(err error) error {
	s.closeErr.StoreIfEmpty(utils.NewErrorValue(err))
	return s.closeErr.Load().Error
}

type sessionsMngrInfo struct {
	// nil means the session is done
	sessions    *utils.Slice[*Session]
	currSession *Session
}

// SessionsManager manages multiple sessions.
type SessionsManager struct {
	sessions *utils.RWMutex[sessionsMngrInfo]
	running  atomic.Int32
  // Is closed when the client is closed.
  closedChan chan utils.Unit
}

// NewSessionsManager creates a new sessions manager.
func NewSessionsManager() *SessionsManager {
	sm := &SessionsManager{
		sessions: utils.NewRWMutex(sessionsMngrInfo{
			sessions: utils.NewSlice[*Session](nil),
		}),
    closedChan: make(chan utils.Unit, 0),
	}
	return sm
}

// Start starts the sessions manager.
func (sm *SessionsManager) Start() bool {
  started := sm.running.CompareAndSwap(runningNotStarted, runningRunning)
  if !started {
    return false
  }
  sm.sessions.Apply(func(smip *sessionsMngrInfo) {
    for _, sess := range smip.sessions.Data() {
      go sess.run()
    }
  })
  return true
}

// Running returns whether the manager is currently running.
func (sm *SessionsManager) Running() bool {
	return sm.running.Load() == runningRunning
}

// GetSession attempts to retrieve the desired session, returning nil if it
// doesn't exist in this manager. If the session ID is blank, the current
// session is returned, if there is one.
func (sm *SessionsManager) GetSession(id SessionId) (session *Session) {
	sm.sessions.RApply(func(smip *sessionsMngrInfo) {
		if smip.sessions == nil {
			return
		}
		if id.IsBlank() {
			session = smip.currSession
			return
		}
		for _, sess := range smip.sessions.Data() {
			if sess.id.Equal(id) {
				session = sess
				return
			}
		}
	})
	return
}

var (
  // ErrSessionOwned is returned if the session is owned by another manager.
	ErrSessionOwned  = fmt.Errorf("session already owned")
  // ErrSessionExists is returned if a session with the given ID already
  // exixts.
	ErrSessionExists = fmt.Errorf("session with ID already exists")
)

// TryAddCurrent attempts to add the given session and make it the current one.
func (sm *SessionsManager) TryAddCurrent(session *Session) (err error) {
	if session.manager.Load() != nil {
		return ErrSessionOwned
	}
	// TODO: is there a case where session is running at this point?
	sm.sessions.Apply(func(smip *sessionsMngrInfo) {
		if smip.sessions == nil {
			err = ErrShutdown
			return
		}
		for _, sess := range smip.sessions.Data() {
			if sess.id.Equal(session.id) {
				err = ErrSessionExists
				return
			}
		}
		if !session.manager.CompareAndSwap(nil, sm) {
			err = ErrSessionOwned
			return
		}
		smip.sessions.PushBack(session)
		smip.currSession = session
	})
	if err != nil {
		return
	}
	if sm.Running() {
		go session.run()
	}
	return
}

// TryAdd attempts to add the given session, without making it the current one.
func (sm *SessionsManager) TryAdd(session *Session) (err error) {
	if session.manager.Load() != nil {
		return ErrSessionOwned
	}
	// TODO: is there a case where session is running at this point?
	sm.sessions.Apply(func(smip *sessionsMngrInfo) {
		if smip.sessions == nil {
			err = ErrShutdown
			return
		}
		for _, sess := range smip.sessions.Data() {
			if sess.id.Equal(session.id) {
				err = ErrSessionExists
				return
			}
		}
		if !session.manager.CompareAndSwap(nil, sm) {
			err = ErrSessionOwned
			return
		}
		smip.sessions.PushBack(session)
	})
	if err != nil {
		return
	}
	if sm.Running() {
		go session.run()
	}
	return
}

// CurrentSession session returns the current session. This is the session that
// is joined when a client doesn't specify a session ID.
func (sm *SessionsManager) CurrentSession() *Session {
	smip := sm.sessions.RLock()
	defer sm.sessions.RUnlock()
	if smip.sessions == nil {
		return nil
	}
	return smip.currSession
}

// SetCurrentSession attempts to set the session with the given ID as the
// current session, returning true if successful.
func (sm *SessionsManager) SetCurrentSession(id SessionId) (ok bool) {
	sm.sessions.Apply(func(smip *sessionsMngrInfo) {
		if smip.sessions == nil {
			return
		}
		for _, sess := range smip.sessions.Data() {
			if sess.id.Equal(id) {
				smip.currSession = sess
				ok = true
				return
			}
		}
	})
	return
}

// RemoveSession attempts to remove the session with the given ID. If it is the
// current session, it is replaced with the optional replacementId, if it
// exists. True is returned if after all is run, there is a current session
// present.
func (sm *SessionsManager) RemoveSession(
	id SessionId,
	replacementId *SessionId,
) (*Session, bool) {
	smip := sm.sessions.Lock()
	defer sm.sessions.Unlock()
	if smip.sessions == nil {
		return nil, false
	}
	sess, _ := smip.sessions.RemoveFirst(func(sess *Session) bool {
		return sess.id.Equal(id)
	})
	if sess == nil {
		return nil, false
	}
	sess.manager.Store(nil)
	wasCurr := smip.currSession.id.Equal(id)
	if wasCurr {
		if replacementId != nil {
			rid := *replacementId
			if replacementId.Equal(SessionIdBlank()) {
				smip.currSession = smip.sessions.Get(smip.sessions.Len() - 1)
			} else {
				i := smip.sessions.Index(func(sess *Session) bool {
					return sess.id.Equal(rid)
				})
				if i != -1 {
					smip.currSession = smip.sessions.Get(i)
				} else {
					smip.currSession = nil
				}
			}
		} else {
			smip.currSession = nil
		}
	}
	return sess, wasCurr && smip.currSession != nil
}

// Shutdown shutsdown the manager and all owned session, returning true if
// if this called shut it down.
func (sm *SessionsManager) Shutdown() (wasShutdown bool) {
	sm.sessions.Apply(func(smip *sessionsMngrInfo) {
		if smip.sessions == nil {
			return
		}
		wasShutdown = true
    sessions := smip.sessions
		for _, sess := range sessions.Data() {
      // NOTE:
			// Set manager to nil so that it won't attempt to remove itself from the
			// manager, which will result in a deadlock.
			sess.manager.Store(nil)
      sess.closeWithErr(ErrSessionEnded)
			sess.end()
		}
    go func() {
      for _, sess := range sessions.Data() {
        sess.Wait(NeverDoneContext())
      }
      close(sm.closedChan)
    }()
		smip.sessions = nil
		smip.currSession = nil
	})
	sm.running.Store(runningStopped)
	return wasShutdown
}

// IsClosed returns true if the manager is closed.
func (sm *SessionsManager) IsClosed() bool {
	defer sm.sessions.RUnlock()
	return sm.sessions.RLock().sessions == nil
}

// Wait waits for the client to be closed. If there is no done channel or the
// context is nil, the function returns immediately whether it is closed or
// not. Otherwise, it waits for closure or the context to be canceled,
// whichever is first. This won't complete successfully until all managed
// sessions are also done.
func (sm *SessionsManager) Wait(ctx context.Context) bool {
  _, ok := <-sm.closedChan
  if ok {
    return true
  }
  if ctx == nil {
    return false
  }
  done := ctx.Done()
  if done == nil {
    return false
  }
  closed := false
  select {
  case _, _ = <-done:
  case _, _ = <- sm.closedChan:
    closed = true
  }
  return closed
}

// ServerOpts are options used for server creation.
type ServerOpts struct {
	Username Username
	Password Password
}

type lnsSlice = utils.Slice[*net.TCPListener]

// Server is a SoupBinTCP server.
type Server struct {
	opts     *ServerOpts
	sessions *SessionsManager
	closeErr *utils.AValue[utils.ErrorValue]
  // Is closed when the client is closed. Can only be closed with Shutdown
  // so it will be closed at the end of that function.
  closedChan chan utils.Unit
	// The Slice struct should ebe set to nil when shutdown
	listeners *utils.RWMutex[*lnsSlice]
}

// NewServer creates a new server with the optionally given sessions manager
// and server opts. Both the SessionsManager and ServerOpts can be reused
// between different servers.
func NewServer(sm *SessionsManager, opts *ServerOpts) *Server {
	if sm == nil {
		sm = NewSessionsManager()
	}
  if opts == nil {
    opts = &ServerOpts{}
  }
	return &Server{
		opts:     opts,
		sessions: sm,
		//closeErr: utils.NewAValue(utils.NewErrorValue(nil)),
		closeErr:  &utils.AValue[utils.ErrorValue]{},
    closedChan: make(chan utils.Unit, 0),
		listeners: utils.NewRWMutex(utils.NewSlice[*net.TCPListener](nil)),
	}
}

// Addrs returns the addresses the server is listening on.
func (s *Server) Addrs() (addrs []net.Addr) {
	s.listeners.RApply(func(sp **utils.Slice[*net.TCPListener]) {
		lns := *sp
		if lns == nil {
			return
		}
		addrs = make([]net.Addr, lns.Len())
		for i, ln := range lns.Data() {
			addrs[i] = ln.Addr()
		}
	})
	return
}

// SessionsManager returns the SessionsManager used by the server.
func (s *Server) SessionsManager() *SessionsManager {
	return s.sessions
}

// Run attempts to run the server on the given address. This can be called
// multiple times.
func (s *Server) Run(addr string) error {
	if err := s.CloseErr(); err != nil {
		return err
	}
	taddr, err := net.ResolveTCPAddr("tcp", addr)
	if err != nil {
		return err
	}
	ln, err := net.ListenTCP("tcp", taddr)
	if err != nil {
		return err
	}
	return s.RunWithListener(ln)
}

// RunWithListener attempts to run the server with the given TCP listener. This
// can be called multiple times.
func (s *Server) RunWithListener(ln *net.TCPListener) error {
	defer ln.Close()
	if err := s.CloseErr(); err != nil {
		return err
	}
	s.listeners.Apply(func(sp **lnsSlice) {
		lns := *sp
		if lns == nil {
			ln = nil
			return
		}
		lns.PushBack(ln)
	})
	if ln == nil {
		return s.CloseErr()
	}
	s.sessions.Start()
	for {
		conn, err := ln.AcceptTCP()
		if err != nil {
			ce := s.CloseErr()
			if ce != nil {
				err = ce
			}
			return err
		}
		go s.handle(conn)
	}
}

func (s *Server) handle(conn *net.TCPConn) {
	shouldClose := utils.NewT(true)
	defer utils.DeferClose(shouldClose, conn)
	packet, err := TryReadPacketFromAs(conn, PacketTypeLoginRequest)
	if err != nil {
		return
	}
	username, password, ok := packet.Credentials()
	if !ok {
		return
	}
	if !bytes.EqualFold(username[:], s.opts.Username[:]) ||
		!bytes.EqualFold(password[:], s.opts.Password[:]) {
		conn.Write(LoginRejectPacket(LoginRejectNotAuthorized).Bytes())
		return
	}

	sessionId, ok := packet.SessionId()
	if !ok {
		conn.Write(LoginRejectPacket(LoginRejectSessionNotAvail).Bytes())
		return
	}
	session := s.sessions.GetSession(sessionId)
	if session == nil {
		conn.Write(LoginRejectPacket(LoginRejectSessionNotAvail).Bytes())
		return
	}
	*shouldClose = false
	session.handle(conn, packet)
}

// Shutdown is used to shutdown the server. If endSessions is true, it ends the
// SessionsManager associated with it. If that manager is used by other severs,
// those will also have their sessions managers ended (since they would be
// sharing the same one). Returns true if this call shut down the server.
func (s *Server) Shutdown(endSessions bool) (wasShutdown bool) {
	if s.IsClosed() {
		return
	}
	if _, set := s.closeWithErr(ErrShutdown); !set {
    return
  }
	s.listeners.Apply(func(sp **utils.Slice[*net.TCPListener]) {
		lns := *sp
		if lns == nil {
			return
		}
		for _, ln := range lns.Data() {
			ln.Close()
		}
		*sp = nil
		wasShutdown = true
	})
	if endSessions {
		s.sessions.Shutdown()
	}
  close(s.closedChan)
	return
}

// Returns true if the error was set with this call.
func (s *Server) closeWithErr(err error) (error, bool) {
  set := s.closeErr.StoreIfEmpty(utils.NewErrorValue(err))
	return s.closeErr.Load().Error, set
}

// CloseErr returns the error associated with the server's closure.
func (s *Server) CloseErr() error {
	ev, _ := s.closeErr.LoadSafe()
	return ev.Error
}

// IsClosed returns true if the server is closed.
func (s *Server) IsClosed() bool {
	return s.CloseErr() != nil
}

// Wait waits for the client to be closed. If there is no done channel or the
// context is nil, the function returns immediately whether it is closed or
// not. Otherwise, it waits for closure or the context to be canceled,
// whichever is first. To make sure the session ended message is sent, the
// session manager should be waited on as well.
func (s *Server) Wait(ctx context.Context) bool {
  _, ok := <-s.closedChan
  if ok {
    return true
  }
  if ctx == nil {
    return false
  }
  done := ctx.Done()
  if done == nil {
    return false
  }
  closed := false
  select {
  case _, _ = <-done:
  case _, _ = <- s.closedChan:
    closed = true
  }
  return closed
}

var (
  // ErrShutdown is returned if something is shutdown.
	ErrShutdown = fmt.Errorf("shutdown")
)

type globalTicker struct {
	funcs    *utils.RWMutex[*Slice[func(time.Time)]]
	shutdown chan utils.Unit
}

func newGlobalTicker() *globalTicker {
	return &globalTicker{
		funcs: utils.NewRWMutex(
			(*Slice[func(time.Time)])(utils.NewSlice[func(time.Time)](nil)),
		),
	}
}

func (sgh globalTicker) add(f func(time.Time)) {
	sgh.funcs.Apply(func(sp **Slice[func(time.Time)]) {
		(*sp).PushBack(f)
	})
}

func (sgh globalTicker) del(f func(time.Time)) {
	fp := reflect.ValueOf(f).Pointer()
	sgh.funcs.Apply(func(sp **Slice[func(time.Time)]) {
		i := (*sp).Index(func(f2 func(time.Time)) bool {
			return reflect.ValueOf(f).Pointer() == fp
		})
		if i != -1 {
			(*sp).SwapRemove(i)
		}
	})
}

func (sgh globalTicker) start() {
	go sgh.run()
}

func (sgh globalTicker) run() {
	ticker := time.NewTicker(time.Second)
	for {
		select {
		case t := <-ticker.C:
			go sgh.runFuncs(t)
			/*
			 */
		case <-sgh.shutdown:
			ticker.Stop()
			return
		}
	}
}

func (sgh globalTicker) runFuncs(t time.Time) {
	sgh.funcs.RApply(func(sp **Slice[func(time.Time)]) {
		for _, f := range (*sp).Data() {
			go f(t)
		}
	})
}

type Slice[T any] utils.Slice[T]

func (s *Slice[T]) SwapRemove(i int) T {
	l := s.Len()
	if i >= l {
		panic(fmt.Sprintf("index %d out of bounds of len %d", i, l))
	}
	data := s.Data()
	data[i], data[l-1] = data[l-1], data[i]
	return utils.First(s.PopBack())
}
